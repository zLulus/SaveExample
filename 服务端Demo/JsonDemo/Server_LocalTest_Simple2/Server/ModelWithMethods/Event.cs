//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;
using Newtonsoft.Json;

namespace DAL
{
    using System;
    using System.Collections.Generic;
    
    public partial class Event
    {
        public static string ClassToJson(Event _event)
        {
            return JsonConvert.SerializeObject(_event);
        }

        public static Event JsonToClass(string jsonStr)
        {
            object obj = JsonConvert.DeserializeObject(jsonStr);
            if (obj == null) return null;
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(obj);
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            for (int i = 0; i < properties.Count; i++)
                dictionary.Add(properties[i].Name, properties[i].GetValue(obj).ToString());
            Type eventType = typeof(Event);
            Event result = new Event();
            foreach (var item in dictionary.Keys)
            {
                var propertyInfo = eventType.GetProperty(item);
                if (propertyInfo != null)
                {
                    object o = dictionary[item];
                    if (propertyInfo.PropertyType == typeof(int) || propertyInfo.PropertyType == typeof(Nullable<int>))
                        o = Convert.ToInt32(dictionary[item]);
                    else if (propertyInfo.PropertyType == typeof(byte))
                        o = Convert.ToByte(dictionary[item]);
                    else if (propertyInfo.PropertyType == typeof(DateTime) || propertyInfo.PropertyType == typeof(Nullable<System.DateTime>))
                        o = Convert.ToDateTime(dictionary[item]);
                    propertyInfo.SetValue(result, o, null);
                }
            }
            return result;
        }
    }
}
